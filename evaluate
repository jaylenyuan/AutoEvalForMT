#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
import nontrain

def word_matches(h, ref):
    return sum(1 for w in h if w in ref)
def simple_meteor(h, ref):
    alpha = 0.8
    rset = set(ref)
    h_match = word_matches(h, rset)
    p = (h_match * 1.0) / len(rset)
    r = (h_match * 1.0) / len(h)
    l = 0
    if p + r != 0:
        l = p * r/ ((1 - alpha) * p + alpha * r)
    return l

def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        
        l1 = simple_meteor(h1, ref) + 0.3 * nontrain.feature_evalutaion(h1, ref)
        l2 = simple_meteor(h2, ref) + 0.3 * nontrain.feature_evalutaion(h2, ref)
       
        
        print(1 if l1 > l2 else # \begin{cases}
            (0 if l1 == l2
                else -1)) # \end{cases}

 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
